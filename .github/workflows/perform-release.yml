name: Perform a RELEASE
on:
  pull_request:
    types: [closed]
    branches: [main]
  workflow_dispatch:
    inputs:
      RELEASE_BRANCH:
        description: 'Release branch'
        type: choice
        required: true
        default: 'main'
        options:
          - main
jobs:
  Perform-a-RELEASE:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || (github.event.pull_request.merged == true && contains(join(github.event.pull_request.labels.*.name, ', '), 'release'))
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      CI_COMMIT_AUTHOR: ${{ secrets.CI_COMMIT_AUTHOR }}
      CI_COMMIT_MAIL: ${{ secrets.CI_COMMIT_MAIL }}
    steps:
      - name: Get input parameters
        run: |
          echo "BRANCH=${{ github.event.inputs.RELEASE_BRANCH || github.ref }}" >> $GITHUB_ENV
      - name: Checkout repository code
        uses: actions/checkout@v3
        with:
          ref: ${{ env.BRANCH }}
          fetch-depth: 0
      - name: Setup Java JDK and Maven
        uses: ontimize/setup-java-maven-gitAction@v3
        with:
          distribution: 'temurin'
          java-version: '11'
      - name: Generate jar from project
        run: |
          mvn -B clean install
      - name: Set author identity
        run: |
          git config --global user.name "${{ env.CI_COMMIT_AUTHOR }}"
          git config --global user.email "${{ secrets.CI_COMMIT_MAIL }}"
      - name: Annotate main version with a tag
        id: tag
        run: |
          version=$(mvn help:evaluate -q -Dexpression=project.version -DforceStdout)
          git tag -a $version -m "Version $version"
          git push origin $version
          echo "version=$version" >> $GITHUB_OUTPUT
      - name: Create sync branch
        run: |
          version=${{ steps.tag.outputs.version }}
          git checkout -b sync/$version
          mvn -B build-helper:parse-version versions:set -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.nextMinorVersion}.0-SNAPSHOT versions:commit
          version_dev=$(mvn help:evaluate -q -Dexpression=project.version -DforceStdout)
          git add .
          git commit -m "New develop version → $version_dev"
          git push origin sync/$version
      - name: Create pull request
        run: |
          version=${{ steps.tag.outputs.version }}
          gh pr create -B develop -H sync/$version --title "Backmerge from main into develop" --body "Created by a GitHub Action → Resync develop branch with main branch and increase project version"
      - name: Create release on Github
        uses: ncipollo/release-action@v1.13.0
        with:
          commit: ${{ env.BRANCH }}
          tag: ${{ steps.tag.outputs.version }}
          name: ${{ steps.tag.outputs.version }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: "target/WikiTreeBuilder.jar"
          body: |
            En el [README.md](README.md#Changelog) tienes los cambios de la versión ${{ steps.tag.outputs.version }}